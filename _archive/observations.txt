-i  --ignore-case                       :Ignore case differences in file contents.
--ignore-file-name-case                 :Ignore case when comparing file names.
-E  --ignore-tab-expansion              :Ignore changes due to tab expansion.
-b  --ignore-space-change               :Ignore changes in the amount of white space.
-w  --ignore-all-space                  :Ignore all white space.
-B  --ignore-blank-lines                :Ignore changes whose lines are all blank.
/* maybe develope our own RE */
-I RE  --ignore-matching-lines=RE       :Ignore changes whose lines all match RE.
--strip-trailing-cr                     :Strip trailing carriage return on input.
-a  --text                              :Treat all files as text.
--label LABEL                           :Use LABEL instead of file name.
-q  --brief                             :Output only whether files differ.
-e  --ed                                :Output an ed script.
--normal                                :Output a normal diff.
-y  --side-by-side                      :Output in two columns.
--left-column                           :Output only the left column of common lines.
--suppress-common-lines                 :Do not output common lines.
-l  --paginate                          :Pass the output through `pr' to paginate it.
-t  --expand-tabs                       :Expand tabs to spaces in output.
-T  --initial-tab                       :Make tabs line up by prepending a tab.
-r  --recursive                         :Recursively compare any subdirectories found.
-s  --report-identical-files            :Report when two files are the same.
-d  --minimal                           :Try hard to find a smaller set of changes.
--speed-large-files                     :Assume large files and many scattered small changes.
-D NAME  --ifdef=NAME                   :Output merged file to show `#ifdef NAME' diffs.
--GTYPE-group-format=GFMT               :Similar, but format GTYPE input groups with GFMT.
--line-format=LFMT                      :Similar, but format all input lines with LFMT.
--LTYPE-line-format=LFMT                :Similar, but format LTYPE input lines with LFMT.
LTYPE is `old', `new', or `unchanged'.          
GTYPE is LTYPE or `changed'.
GFMT may contain:
    %<     lines from FILE1
    %>     lines from FILE2
    %=     lines common to FILE1 and FILE2

%[-][WIDTH][.[PREC]]{doxX}LETTER
    > printf-style spec for LETTER
    > LETTERs are as follows for new group, lower case for old group:
        F      first line number
        L      last line number
        N      number of lines = L-F+1
        E      F-1
        M      L+1

    > LFMT may contain:
        %L     contents of line
        %l     contents of line, excluding any trailing newline

%[-][WIDTH][.[PREC]]{doxX}n
    > printf-style spec for input line number
    > Either GFMT or LFMT may contain:
        %%     %
        %c'C'  the single character C
        %c'\OOO' the character with octal code OOO

diff -wIy out.csv out4.csv

out.csv:
Minimum,Interest,Term(Months),Balance,Lender
"$21.20",3.50%,6,$233.39,Citi
"$3.39",4.50%,144,$3.39,Ford
"$14.00",1.50%,12,$233.00,BarClay
"$50.00",3.55%,12,"$2,333.39",Apple
"$310.33",3.99%,72,"$23,453.39",Volkswagon
"$75.10",23.49%,24,"$2,331.39",ICCU

out4.csv:
Minimum,Interest,Term(Months),Balance,Lender
"$21.20",3.50%,6,   $233.39,Citi
"$3.39",4.50%,144,$3.39,Ford
"$14.00",1.50%,12,$233.00,BarClay
"$50.00",  3.55%,12,"$2,333.39",Apple
"$310.33",3.99%,72,"$23,453.39",Volkswagon
$75.10,23.49%,24,"$2,331.39",ICCU

Comment: 
    this command had no output (white space ignored)


Found possible example script: 

#   
#   
# diff --brief $1 $2 >/dev/null
# comp_value=$?

# if [ $comp_value -eq 1 ]
# then
#     echo "do something because they're different"
# else
#     echo "do something because they're identical"
# fi
# 
# 
# #!/bin/sh

# case $# in
# 0) echo "Usage " `basename $0` " <program> [<verbose=true|false>]"; exit 1;;
# esac

# program=$1
# debug=true
# if test "$2" != ""
# then
#     debug=$2
# fi
# count=10

# $program < inputs/test1.in > outputs/test1.out

# if test "$debug" = "true"
# then
#     diff  outputs/test1.out outputs/test1.out.correct 
# else
#     diff  outputs/test1.out outputs/test1.out.correct >& /dev/null
# fi

# if test "$?" = "0"
# then
#     echo "test1 passed!"
# else
#     echo "test1 FAILED!"
# fi
